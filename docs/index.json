{
  "api/SipRecClient.MediaLabel.html": {
    "href": "api/SipRecClient.MediaLabel.html",
    "title": "Enum MediaLabel",
    "keywords": "Enum MediaLabel Enumeration for the label attribute of an SDP media description for SIPREC media channels. Namespace: SipRecClient Assembly: SipRecClient.dll Syntax public enum MediaLabel Fields Name Description ReceivedAudio Media label number for audio received from the caller or the called party. ReceivedMsrp Media label number for MSRP media received from the caller or the called party. ReceivedRTT Media label number for RTT received from the caller or the called party. ReceivedVideo Media label number for video received from the caller or the called party. SentAudio Media label number for audio sent to the caller or the called party. SentMsrp Media label number for MSRP media sent to the caller or the called party. SentRTT Media label number for RTT sent to the caller or the called party. SentVideo Media label number for video sent to the caller or the called party."
  },
  "api/SipRecClient.SipRecRecorderSettings.html": {
    "href": "api/SipRecClient.SipRecRecorderSettings.html",
    "title": "Class SipRecRecorderSettings",
    "keywords": "Class SipRecRecorderSettings Configuration settings for a single SIPREC media recorder Inheritance object SipRecRecorderSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipRecClient Assembly: SipRecClient.dll Syntax public class SipRecRecorderSettings Constructors SipRecRecorderSettings() Constructor Declaration public SipRecRecorderSettings() Properties EnableOptions If true, then the SrcUserAgent will send SIP OPTIONS requests periodically to the SRS. Declaration public bool EnableOptions { get; set; } Property Value Type Description bool Enabled If true then this SIPREC recorder is enabled Declaration public bool Enabled { get; set; } Property Value Type Description bool LocalIpEndpoint Specifies the SIP interface local IP endpoint for the SIPREC Recording Client (SRC) Declaration public string LocalIpEndpoint { get; set; } Property Value Type Description string MsrpEncryption Specifies the encryption to offer the recorder for MSRP media Declaration public MsrpEncryptionEnum MsrpEncryption { get; set; } Property Value Type Description MsrpEncryptionEnum Name Name of the SIPREC recorder. Declaration public string Name { get; set; } Property Value Type Description string OptionsIntervalSeconds Specifies the interval in seconds at which SIP OPTIONS requests are sent to the SRS. Declaration public int OptionsIntervalSeconds { get; set; } Property Value Type Description int RtpEncryption Specifies the encryption to offer the recorder for RTP type media (audio, video, RTT). Declaration public RtpEncryptionEnum RtpEncryption { get; set; } Property Value Type Description RtpEncryptionEnum SipTransportProtocol Specifies the transport protocol for SIP for the recorder Declaration public SIPProtocolsEnum SipTransportProtocol { get; set; } Property Value Type Description SIPProtocolsEnum SrsIpEndpoint Specifies the SIP interface IP endpoint of the SIPREC Recording Server (SRS). For example 192.168.1.76:5060. Declaration public string SrsIpEndpoint { get; set; } Property Value Type Description string"
  },
  "api/SipRecClient.SipRecSettings.html": {
    "href": "api/SipRecClient.SipRecSettings.html",
    "title": "Class SipRecSettings",
    "keywords": "Class SipRecSettings SIPREC configuration settings Inheritance object SipRecSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipRecClient Assembly: SipRecClient.dll Syntax public class SipRecSettings Constructors SipRecSettings() Constructor Declaration public SipRecSettings() Properties EnableSipRec Enables recording on all SIPREC recorders Declaration public bool EnableSipRec { get; set; } Property Value Type Description bool SipRecRecorders Settings for one or more SIPREC media recorders Declaration public List<SipRecRecorderSettings> SipRecRecorders { get; set; } Property Value Type Description List<SipRecRecorderSettings>"
  },
  "api/SipRecClient.SrcCallParameters.html": {
    "href": "api/SipRecClient.SrcCallParameters.html",
    "title": "Class SrcCallParameters",
    "keywords": "Class SrcCallParameters Parameters that the SrcUserAgent will need to set up a SIPREC call to a SIP Recording Server (SRS). Inheritance object SrcCallParameters Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipRecClient Assembly: SipRecClient.dll Syntax public class SrcCallParameters Fields AnsweredSdp SDP that was used to answer the original call. Declaration public Sdp AnsweredSdp Field Value Type Description Sdp CallId Call-ID header value for the original call. Declaration public string CallId Field Value Type Description string CallMsrpConnection MsrpConnection object that is handling the MSRP media for the original call. This may be null if the call has no MSRP media. Declaration public MsrpConnection? CallMsrpConnection Field Value Type Description MsrpConnection CallRtpChannels List of RtpChannel objects that are handling the audio, RTT and video media for the original call. Declaration public List<RtpChannel> CallRtpChannels Field Value Type Description List<RtpChannel> EmergencyCallIdentifier emergency-CallId Call-Info header purpose value for the original call. Declaration public string EmergencyCallIdentifier Field Value Type Description string EmergencyIncidentIdentifier emergency-IncidentId Call-Info header purpose value for the original call. Declaration public string EmergencyIncidentIdentifier Field Value Type Description string Properties FromUri SIP URI of the caller from the From header value of the call to be recorded. Declaration public SIPURI FromUri { get; set; } Property Value Type Description SIPURI ToUri To header value from the call to be recorded. Declaration public SIPURI ToUri { get; set; } Property Value Type Description SIPURI"
  },
  "api/SipRecClient.SrcManager.html": {
    "href": "api/SipRecClient.SrcManager.html",
    "title": "Class SrcManager",
    "keywords": "Class SrcManager Class for managing SipRec Recording Client interfaces to multiple SIPREC Recorder Servers (SRS) Inheritance object SrcManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipRecClient Assembly: SipRecClient.dll Syntax public class SrcManager Constructors SrcManager(SipRecSettings, MediaPortManager, X509Certificate2, string, string, string, I3LogEventClientMgr, bool) Constructor Declaration public SrcManager(SipRecSettings sipRecSettings, MediaPortManager portManager, X509Certificate2 certificate, string agencyID, string agentID, string elementID, I3LogEventClientMgr i3EventClientManager, bool enableLogging) Parameters Type Name Description SipRecSettings sipRecSettings Settings for all SIPREC recording clients MediaPortManager portManager Used for allocating UDP and TCP ports for media streams. X509Certificate2 certificate X.509 certificate to use for SIP over TLS (SIPS) and MSRP over TLS (MSRPS). Required even if TLS is not currently in use. string agencyID Identity of the agency that is recording and logging calls string agentID Identity of the agent or call taker that is recording and logging calls. string elementID NG9-1-1 Element Identifier of the entity recording calls. I3LogEventClientMgr i3EventClientManager bool enableLogging If true then I3 event logging is enabled Methods HandleReInvite(SrcCallParameters) Call this method when a call that is being recorded handles a re-INVITE. Declaration public void HandleReInvite(SrcCallParameters srcCallParameters) Parameters Type Name Description SrcCallParameters srcCallParameters Parameters for the call Shutdown() Shuts down the interface to each SIPREC recording server and releases all connections and resources. Declaration public Task Shutdown() Returns Type Description Task Start() Start the interface to each SIPREC recording server Declaration public void Start() StartRecording(SrcCallParameters) Starts a recording session for each recording server for a new call. Declaration public void StartRecording(SrcCallParameters srcCallParameters) Parameters Type Name Description SrcCallParameters srcCallParameters Parameters for the call StopRecording(string) Stops the recording session for each recorder for a call. Declaration public void StopRecording(string strCallId) Parameters Type Name Description string strCallId Call-ID for the call being recorded."
  },
  "api/SipRecClient.SrcUserAgent.html": {
    "href": "api/SipRecClient.SrcUserAgent.html",
    "title": "Class SrcUserAgent",
    "keywords": "Class SrcUserAgent SIP Recording Client (SRC) User Agent class. This class handles all calls being recorded by a SIP Recording Server (SRS) using a single, permanent connection to the SRS. It also logs NG9-1-1 I3V3 events. To use this class, construct an instance of it, hook the events and then call the Start() method. Call the Shutdown() method to close all network connections and release resources when the application is closing or when the interface to the SIPREC recorder is no longer needed. Inheritance object QueuedActionWorkerTask SrcUserAgent Inherited Members QueuedActionWorkerTask.EnqueueWork(Action) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipRecClient Assembly: SipRecClient.dll Syntax public class SrcUserAgent : QueuedActionWorkerTask Constructors SrcUserAgent(SipRecRecorderSettings, MediaPortManager, X509Certificate2, string, string, string, I3LogEventClientMgr, bool) Constructor Declaration public SrcUserAgent(SipRecRecorderSettings settings, MediaPortManager portManager, X509Certificate2 certificate, string agencyID, string agentID, string elementID, I3LogEventClientMgr i3LogEventClentMgr, bool enableLogging) Parameters Type Name Description SipRecRecorderSettings settings Configuration settings MediaPortManager portManager Used for allocating UDP and TCP ports for media streams. X509Certificate2 certificate X.509 certificate to use for SIP over TLS (SIPS) and MSRP over TLS (MSRPS). Required even if TLS is not currently in use. string agencyID Identity of the agency that is recording and logging calls string agentID Identity of the agent or call taker that is recording and logging calls. string elementID NG9-1-1 Element Identifier of the entity recording calls. I3LogEventClientMgr i3LogEventClentMgr bool enableLogging If true then I3 event logging is enabled. Properties Enabled Gets the Enabled setting Declaration public bool Enabled { get; } Property Value Type Description bool SrsResponding Gets the status of the SIP Recording Server (SRS) Declaration public bool SrsResponding { get; } Property Value Type Description bool Methods DoTimedEvents() Declaration protected override void DoTimedEvents() Overrides QueuedActionWorkerTask.DoTimedEvents() HandleReInvite(SrcCallParameters) Call this method after the call being recorded has been re-invited. A re-INVITE can occur in order to re-target media and/or to add new media to an existing call. If the call being recorded is re-invited just to retarget existing media, then it is necessary to hook the events of any RtpChannel and MsrpConnection objects of the call and it is not necessary to send a re-INVITE to the SRS or to rebuild the SIPREC metadata. If media is added to the call being recorded, then it is necessary to send a re-INVITE request to the SRS with updated SIPREC metadata. Declaration public void HandleReInvite(SrcCallParameters newSrcCallParameters) Parameters Type Name Description SrcCallParameters newSrcCallParameters Updated parameters for the SRC call Shutdown() Shuts down all SIP transport connections and releases resources. Declaration public override Task Shutdown() Returns Type Description Task Overrides QueuedActionWorkerTask.Shutdown() Start() Initializes the SIP transport interface to the SRS and starts communication with the SRS. Declaration public override void Start() Overrides QueuedActionWorkerTask.Start() StartRecording(SrcCallParameters) Starts the SIPREC recording process for a new call Declaration public void StartRecording(SrcCallParameters srcCallParameters) Parameters Type Name Description SrcCallParameters srcCallParameters Contains the parameters for the new call StopRecording(string) Call this method to stop recording when a call has ended. Declaration public void StopRecording(string strCallId) Parameters Type Name Description string strCallId Call-ID for the call."
  },
  "api/SipRecClient.html": {
    "href": "api/SipRecClient.html",
    "title": "Namespace SipRecClient",
    "keywords": "Namespace SipRecClient Classes SipRecRecorderSettings Configuration settings for a single SIPREC media recorder SipRecSettings SIPREC configuration settings SrcCallParameters Parameters that the SrcUserAgent will need to set up a SIPREC call to a SIP Recording Server (SRS). SrcManager Class for managing SipRec Recording Client interfaces to multiple SIPREC Recorder Servers (SRS) SrcUserAgent SIP Recording Client (SRC) User Agent class. This class handles all calls being recorded by a SIP Recording Server (SRS) using a single, permanent connection to the SRS. It also logs NG9-1-1 I3V3 events. To use this class, construct an instance of it, hook the events and then call the Start() method. Call the Shutdown() method to close all network connections and release resources when the application is closing or when the interface to the SIPREC recorder is no longer needed. Enums MediaLabel Enumeration for the label attribute of an SDP media description for SIPREC media channels."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "",
    "keywords": ""
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Articles Introduction",
    "keywords": "Articles Introduction"
  },
  "getting-started.html": {
    "href": "getting-started.html",
    "title": "Getting Started",
    "keywords": "Getting Started"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE.",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "introduction.html": {
    "href": "introduction.html",
    "title": "Introduction",
    "keywords": "Introduction"
  }
}