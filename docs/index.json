{
  "api/SipRecClient.MediaLabel.html": {
    "href": "api/SipRecClient.MediaLabel.html",
    "title": "Enum MediaLabel",
    "summary": "Enum MediaLabel Enumeration for the label attribute of an SDP media description for SIPREC media channels. Namespace: SipRecClient Assembly: SipRecClient.dll Syntax public enum MediaLabel Fields Name Description ReceivedAudio Media label number for audio received from the caller or the called party. Corresponds to \"a=label:1\". ReceivedMsrp Media label number for MSRP media received from the caller or the called party. Corresponds to \"a=label:7\". ReceivedRTT Media label number for RTT received from the caller or the called party. Corresponds to \"a=label:5\". ReceivedVideo Media label number for video received from the caller or the called party. Corresponds to \"a=label:3\". SentAudio Media label number for audio sent to the caller or the called party. Corresponds to \"a=label:2\". SentMsrp Media label number for MSRP media sent to the caller or the called party. Corresponds to \"a=label:8\", SentRTT Media label number for RTT sent to the caller or the called party. Corresponds to \"a=label:6\". SentVideo Media label number for video sent to the caller or the called party. Corresponds to \"a=label:4\"."
  },
  "api/SipRecClient.SipRecRecorderSettings.html": {
    "href": "api/SipRecClient.SipRecRecorderSettings.html",
    "title": "Class SipRecRecorderSettings",
    "summary": "Class SipRecRecorderSettings Configuration settings for a single SIPREC media recorder Inheritance object SipRecRecorderSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipRecClient Assembly: SipRecClient.dll Syntax public class SipRecRecorderSettings Constructors | Edit this page View Source SipRecRecorderSettings() Constructor Declaration public SipRecRecorderSettings() Properties | Edit this page View Source EnableOptions If true, then the SrcUserAgent will send SIP OPTIONS requests periodically to the SRS. Declaration public bool EnableOptions { get; set; } Property Value Type Description bool The default is true. | Edit this page View Source Enabled If true then this SIPREC recorder is enabled. Declaration public bool Enabled { get; set; } Property Value Type Description bool The default is true. | Edit this page View Source LocalIpEndpoint Specifies the SIP interface local IP endpoint for the SIPREC Recording Client (SRC). This specifies the IPEndPoint that the SrcUserAgent will bind to. This must be unique within the application domain. Declaration public string LocalIpEndpoint { get; set; } Property Value Type Description string This is a string representation of an IPEndPoint object. For example 192.168.1.76:5080. The address may be an IPv4 or an IPv6 address. The address family must match the address family of the SrsIpEndpoint property. | Edit this page View Source MsrpEncryption Specifies the encryption to offer the recorder for MSRP media Declaration public MsrpEncryptionEnum MsrpEncryption { get; set; } Property Value Type Description MsrpEncryptionEnum The default is MsrpEncryptionEnum.None | Edit this page View Source Name Name of the SIPREC recorder. Required. Declaration public string Name { get; set; } Property Value Type Description string Each SIPREC recorder must have a unique name. | Edit this page View Source OptionsIntervalSeconds Specifies the interval in seconds at which SIP OPTIONS requests are sent to the SRS. Declaration public int OptionsIntervalSeconds { get; set; } Property Value Type Description int The default is 5 seconds | Edit this page View Source RtpEncryption Specifies the encryption to offer the recorder for RTP type media (audio, video, RTT). Declaration public RtpEncryptionEnum RtpEncryption { get; set; } Property Value Type Description RtpEncryptionEnum The default is RtpEncryptionEnum.None | Edit this page View Source SipTransportProtocol Specifies the transport protocol for SIP for the recorder Declaration public SIPProtocolsEnum SipTransportProtocol { get; set; } Property Value Type Description SIPProtocolsEnum UDP, TCP and TLS are supported. | Edit this page View Source SrsIpEndpoint Specifies the SIP interface IP endpoint of the SIPREC Recording Server (SRS). Declaration public string SrsIpEndpoint { get; set; } Property Value Type Description string This is a string representation of an IPEndPoint object. For example 192.168.1.76:5060. The address may be an IPv4 or an IPv6 address. The address family must match the address family of the LocalIpEndpoint property."
  },
  "api/SipRecClient.SipRecSettings.html": {
    "href": "api/SipRecClient.SipRecSettings.html",
    "title": "Class SipRecSettings",
    "summary": "Class SipRecSettings SIPREC configuration settings Inheritance object SipRecSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipRecClient Assembly: SipRecClient.dll Syntax public class SipRecSettings Constructors | Edit this page View Source SipRecSettings() Constructor Declaration public SipRecSettings() Properties | Edit this page View Source EnableSipRec Enables recording on all SIPREC recorders Declaration public bool EnableSipRec { get; set; } Property Value Type Description bool The default is true. | Edit this page View Source SipRecRecorders Settings for one or more SIPREC media recorders Declaration public List<SipRecRecorderSettings> SipRecRecorders { get; set; } Property Value Type Description List<SipRecRecorderSettings> The default is an empty list."
  },
  "api/SipRecClient.SrcCallParameters.html": {
    "href": "api/SipRecClient.SrcCallParameters.html",
    "title": "Class SrcCallParameters",
    "summary": "Class SrcCallParameters Parameters that the SrcUserAgent will need to set up a SIPREC call to a SIP Recording Server (SRS). Inheritance object SrcCallParameters Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipRecClient Assembly: SipRecClient.dll Syntax public class SrcCallParameters Fields | Edit this page View Source AnsweredSdp SDP that was used to answer the call that is to be recorded. Declaration public Sdp AnsweredSdp Field Value Type Description Sdp The SDP identifies the media types of each RtpChannel and the media encoding (codecs). This information is used to build the SDP that is offered to the SRS in the SIP INVITE request to it. | Edit this page View Source CallId Call-ID header value for the original call. Declaration public string CallId Field Value Type Description string Required to uniquely identify the call that is being recorded. | Edit this page View Source CallMsrpConnection MsrpConnection object that is handling the MSRP media for the original call. This may be null if the call has no MSRP media. Declaration public MsrpConnection? CallMsrpConnection Field Value Type Description MsrpConnection The MsrpConnection class handles the received and sent MSRP media. Each SrcUserAgent hooks the events of the MsrpConnection so that it can duplicate the media to send to the SRS. | Edit this page View Source CallRtpChannels List of RtpChannel objects that are handling the audio, RTT and video media for the original call. The list may be empty if the call does not contain any audio, video or RTT media. Declaration public List<RtpChannel> CallRtpChannels Field Value Type Description List<RtpChannel> Each RtpChannel handles the received and sent media streams. Each SrcUserAgent hooks the events of each RtpChannel so that it can duplicate the media to send to the SRS. | Edit this page View Source EmergencyCallIdentifier Call-Info header value of the Call-Info header that has a purpose parameter of \"emergency-CallId\" from the call that is being recorded. This field is required for NG9-1-1 calls that are being recorded. Declaration public string EmergencyCallIdentifier Field Value Type Description string See Section 2.1.6 of NENA-STA-010.3b. | Edit this page View Source EmergencyIncidentIdentifier Call-Info header value of the Call-Info header that has a purpose parameter of \"emergency-IncidentId\" from the call that is being recorded. This field is required for NG9-1-1 calls that are being recorded. Declaration public string EmergencyIncidentIdentifier Field Value Type Description string See Section 2.1.7 of NENA-STA-010.3b. Properties | Edit this page View Source FromUri SIP URI of the caller from the From header value of the call to be recorded. Declaration public SIPURI FromUri { get; set; } Property Value Type Description SIPURI This SIPURI identifies the originator of the call. It is used to associate the incoming media streams with the caller in the SIPREC metadata that is sent to the SRS. | Edit this page View Source ToUri To header value from the call to be recorded. Declaration public SIPURI ToUri { get; set; } Property Value Type Description SIPURI This SIPURI identifies the called party. It is used to associate the outgoing media streams with the called party in the SIPREC metadata that is sent to the SRS."
  },
  "api/SipRecClient.SrcManager.html": {
    "href": "api/SipRecClient.SrcManager.html",
    "title": "Class SrcManager",
    "summary": "Class SrcManager Class for managing SipRec Recording Client interfaces to multiple SIPREC Recorder Servers (SRS) Inheritance object SrcManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipRecClient Assembly: SipRecClient.dll Syntax public class SrcManager Constructors | Edit this page View Source SrcManager(SipRecSettings, MediaPortManager, X509Certificate2, string, string, string, I3LogEventClientMgr, bool) Constructor Declaration public SrcManager(SipRecSettings sipRecSettings, MediaPortManager portManager, X509Certificate2 certificate, string agencyID, string agentID, string elementID, I3LogEventClientMgr i3EventClientManager, bool enableLogging) Parameters Type Name Description SipRecSettings sipRecSettings Settings for all SIPREC recording clients MediaPortManager portManager Used for allocating UDP and TCP ports for media streams. X509Certificate2 certificate X.509 certificate to use for SIP over TLS (SIPS) and MSRP over TLS (MSRPS). Required even if TLS is not currently in use. string agencyID Identity of the agency that is recording and logging calls string agentID Identity of the agent or call taker that is recording and logging calls. string elementID NG9-1-1 Element Identifier of the entity recording calls. I3LogEventClientMgr i3EventClientManager Used for logging NG9-1-1 events. Required if NG9-1-1 event logging is required. If not using NG9-1-1 event logging, pass in a default I3LogEventClientMgr object that contains an empty list of I3LogEventClient objects. bool enableLogging If true then I3 event logging is enabled Methods | Edit this page View Source HandleReInvite(SrcCallParameters) Call this method when a call that is being recorded handles a re-INVITE. Declaration public void HandleReInvite(SrcCallParameters srcCallParameters) Parameters Type Name Description SrcCallParameters srcCallParameters Parameters for the call | Edit this page View Source Shutdown() Shuts down the interface to each SIPREC recording server and releases all connections and resources. Declaration public Task Shutdown() Returns Type Description Task | Edit this page View Source Start() Start the interface to each SIPREC recording server Declaration public void Start() | Edit this page View Source StartRecording(SrcCallParameters) Starts a recording session for each recording server for a new call. Declaration public void StartRecording(SrcCallParameters srcCallParameters) Parameters Type Name Description SrcCallParameters srcCallParameters Parameters for the call | Edit this page View Source StopRecording(string) Stops the recording session for each recorder for a call. Declaration public void StopRecording(string strCallId) Parameters Type Name Description string strCallId Call-ID for the call being recorded. Events | Edit this page View Source SrsStatusChanged This event is fired when the status of one of the SIP Recording Servers changes. Declaration public event SrsStatusDelegate? SrsStatusChanged Event Type Type Description SrsStatusDelegate"
  },
  "api/SipRecClient.SrcUserAgent.html": {
    "href": "api/SipRecClient.SrcUserAgent.html",
    "title": "Class SrcUserAgent",
    "summary": "Class SrcUserAgent SIP Recording Client (SRC) User Agent class. This class handles all calls being recorded by a SIP Recording Server (SRS) using a single, permanent connection to the SRS. It also logs NG9-1-1 I3V3 events. To use this class, construct an instance of it, hook the events and then call the Start() method. Call the Shutdown() method to close all network connections and release resources when the application is closing or when the interface to the SIPREC recorder is no longer needed. Inheritance object QueuedActionWorkerTask SrcUserAgent Inherited Members QueuedActionWorkerTask.EnqueueWork(Action) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SipRecClient Assembly: SipRecClient.dll Syntax public class SrcUserAgent : QueuedActionWorkerTask Constructors | Edit this page View Source SrcUserAgent(SipRecRecorderSettings, MediaPortManager, X509Certificate2, string, string, string, I3LogEventClientMgr, bool) Constructor Declaration public SrcUserAgent(SipRecRecorderSettings settings, MediaPortManager portManager, X509Certificate2 certificate, string agencyID, string agentID, string elementID, I3LogEventClientMgr i3LogEventClientMgr, bool enableLogging) Parameters Type Name Description SipRecRecorderSettings settings Configuration settings MediaPortManager portManager Used for allocating UDP and TCP ports for media streams. X509Certificate2 certificate X.509 certificate to use for SIP over TLS (SIPS) and MSRP over TLS (MSRPS). Required even if TLS is not currently in use. string agencyID Identity of the agency that is recording and logging calls string agentID Identity of the agent or call taker that is recording and logging calls. string elementID NG9-1-1 Element Identifier of the entity recording calls. I3LogEventClientMgr i3LogEventClientMgr Used for logging NG9-1-1 events. Required if NG9-1-1 event logging is required. If not using NG9-1-1 event logging, pass in a default I3LogEventClientMgr object that contains an empty list of I3LogEventClient objects. bool enableLogging If true then I3 event logging is enabled. Properties | Edit this page View Source Enabled Gets the Enabled setting Declaration public bool Enabled { get; } Property Value Type Description bool | Edit this page View Source SrsResponding Gets the status of the SIP Recording Server (SRS) Declaration public bool SrsResponding { get; } Property Value Type Description bool Methods | Edit this page View Source DoTimedEvents() Declaration protected override void DoTimedEvents() Overrides QueuedActionWorkerTask.DoTimedEvents() | Edit this page View Source HandleReInvite(SrcCallParameters) Call this method after the call being recorded has been re-invited. A re-INVITE can occur in order to re-target media and/or to add new media to an existing call. If the call being recorded is re-invited just to retarget existing media, then it is necessary to hook the events of any RtpChannel and MsrpConnection objects of the call and it is not necessary to send a re-INVITE to the SRS or to rebuild the SIPREC metadata. If media is added to the call being recorded, then it is necessary to send a re-INVITE request to the SRS with updated SIPREC metadata. Declaration public void HandleReInvite(SrcCallParameters newSrcCallParameters) Parameters Type Name Description SrcCallParameters newSrcCallParameters Updated parameters for the SRC call | Edit this page View Source Shutdown() Shuts down all SIP transport connections and releases resources. Declaration public override Task Shutdown() Returns Type Description Task Overrides QueuedActionWorkerTask.Shutdown() | Edit this page View Source Start() Initializes the SIP transport interface to the SRS and starts communication with the SRS. Declaration public override void Start() Overrides QueuedActionWorkerTask.Start() | Edit this page View Source StartRecording(SrcCallParameters) Starts the SIPREC recording process for a new call Declaration public void StartRecording(SrcCallParameters srcCallParameters) Parameters Type Name Description SrcCallParameters srcCallParameters Contains the parameters for the new call | Edit this page View Source StopRecording(string) Call this method to stop recording when a call has ended. Declaration public void StopRecording(string strCallId) Parameters Type Name Description string strCallId Call-ID for the call. Events | Edit this page View Source SrsStatusChanged This event is fired when the status of the SRS changes. This event will not be fired if the EnableOptions property of the SipRecRecorderSettings object for this SRC is false. Declaration public event SrsStatusDelegate? SrsStatusChanged Event Type Type Description SrsStatusDelegate"
  },
  "api/SipRecClient.SrsStatusDelegate.html": {
    "href": "api/SipRecClient.SrsStatusDelegate.html",
    "title": "Delegate SrsStatusDelegate",
    "summary": "Delegate SrsStatusDelegate Delegate type for the SrsStatusChange event of the SrcManager and the SrcUserAgent classes. Namespace: SipRecClient Assembly: SipRecClient.dll Syntax public delegate void SrsStatusDelegate(string RecorderName, bool SrsResponding, SIPResponseStatusCodesEnum ResponseCode) Parameters Type Name Description string RecorderName Name of the SIP Recording Server. Corresponds to the Name property of the SipRecRecordingSettings for the recorder. bool SrsResponding If true then the SRS is responding to SIP OPTIONS requests, else it is not responding. SIPResponseStatusCodesEnum ResponseCode Response code returned in the response to the OPTIONS request. Will be set to SIPResonseStatusCodesEnum.None if SrsResponding is false."
  },
  "api/SipRecClient.html": {
    "href": "api/SipRecClient.html",
    "title": "Namespace SipRecClient",
    "summary": "Namespace SipRecClient Classes SipRecRecorderSettings Configuration settings for a single SIPREC media recorder SipRecSettings SIPREC configuration settings SrcCallParameters Parameters that the SrcUserAgent will need to set up a SIPREC call to a SIP Recording Server (SRS). SrcManager Class for managing SipRec Recording Client interfaces to multiple SIPREC Recorder Servers (SRS) SrcUserAgent SIP Recording Client (SRC) User Agent class. This class handles all calls being recorded by a SIP Recording Server (SRS) using a single, permanent connection to the SRS. It also logs NG9-1-1 I3V3 events. To use this class, construct an instance of it, hook the events and then call the Start() method. Call the Shutdown() method to close all network connections and release resources when the application is closing or when the interface to the SIPREC recorder is no longer needed. Enums MediaLabel Enumeration for the label attribute of an SDP media description for SIPREC media channels. Delegates SrsStatusDelegate Delegate type for the SrsStatusChange event of the SrcManager and the SrcUserAgent classes."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "",
    "summary": ""
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Articles Introduction",
    "summary": "Articles Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "summary": "Introduction The SipRecClient class library is a .NET DLL that Next Generation 9-1-1 (NG9-1-1) applications can use to record multimedia NG9-1-1 calls. Applications that use the SipLib and Ng911Lib class libraries can use this class library. The following block diagram shows the relationship between the SipRecClient class library and an NG9-1-1 application, SIP Recording Server(s) (SRS) and NG9-1-1 Log Event Servers. Applications that anchor the media of NG9-1-1 multimedia calls can use this class library. This class library supports audio, video, Real Time Text (RTT) and Message Session Relay Protocol (MSRP) text media. Applications initiate and terminate recording sessions using Application Programming Interface (API) method calls to the classes in the SipRecClient class library. The classes of the SipRecClient class library notify the application of asynchronous events. The SipRecClient library implements the SIP Recording Client (SRC) interface to one or more SIP Recording Servers (SRS). Each SRS performs the actual media management and storage functions. The following two RFCs define the active SIP recording protocol which is often referred to as SIPREC. Session Recording Protocol, IETF, RFC 7866, May 2016. Session Initiation Protocol (SIP) Recording Metadata, IETF, RFC 7865. The SipRecClient classes send NG9-1-1 log events that relate to SIPREC calls to one or more NG9-1-1 Log Event servers See NG9-1-1 Event Logging, below. The application is responsible for sending all other log events to the NG9-1-1 Log Event Servers. See Section 4.12.3 and Appendix E.8 of NENA-STA-010.3b. The following figure shows the main classes in the SipRecClient class library. The application interacts with the SipRecManager class. The SipRecManager class creates and manages one or more S4dUserAgent objects based on the configuration settings received from the application. Each SrcUserAgent implements the SIP Recording Client (SRC) portion of the SIPREC protocol and interfaces to one SIP Recording Server (SRS). All SrcUserAgent objects record all calls sent by the application. Each SrcUserAgent is independent and runs in its own task and binds to a unique IP endpoint. The SipRecClient class library supports both IPv4 and IPv6. Getting Started An application initializes the SipRecClient class library by performing the following steps. Create an instance of the SipRecSettings class and populate it with the configuration settings for each SrcUserAgent. Create an instance of the SrcManager class. Hook the events of the SrcManager object. Call the Start() method of the SrcManager object. When the application is shutting down, it must call the Shutdown() method of the SipRecManager class. This method performs an orderly shutdown by forcing all SrcUserAgents to terminate any recordings that are currently in progress. Each SrcUserAgent will close its network connections and release the network resources that it is using. Recording Calls Starting a New Recording When a new NG9-1-1 call is received and answered, the application starts recording that call by performing the following steps. Create an instance of the SrcCallParameters class. The SrcCallParameters class contains all of the information about the call that each SrcUserAgent will need to set up a SIPREC call to its associated SIP Recording Server. Call the StartRecording() method of the SrcManager class passing in the SrcCallParameters object. Ending a Recording When a call that is being recorded ends, the application calls the StopRecording() method of the SrcManager class. The declaration of this method is: public void StopRecording(string strCallId); The strCallId parameter is the SIP Call-ID header value of the call that is being recorded. NG9-1-1 Event Logging Each SrcUserAgent logs the following recording related NG9-1-1 events. RecCallStartLogEvent RecCallEndLogEvent RecMediaStartLogEvent RecMediaEndLogEvent CallSignalingMessageLogEvent"
  }
}